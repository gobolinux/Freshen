# Copyright (C) 2007-2008 Michael Homer <=mwh>
# Copyright (C) 2024 Sage I. Hendricks <sage.message@email.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os.path
from PythonUtils import *
from TTYUtils import Screen


class FreshenArgParser:

    def __init__(self, ui):
        self.fetched = False
        self.ui = ui
        self.fetch()

    def fetch(self):
        if self.fetched:
            return
        goboUserSettings = getGoboVariable('goboUserSettings')
        conffile = os.path.join(goboUserSettings, 'Freshen.conf')
        if os.path.exists(conffile):
            with open(conffile, "r") as f:
                sys.argv = (sys.argv[0:1] +
                            list(map(str.strip, f.readlines())) +
                            sys.argv[1:])
        self.fetched = True
        self.skipSet = set()
        self.examineSet = set()
        self.mode = 'updating'
        self.noCache = False
        self.forceCache = False
        self.noRevisions = True
        self.includeFlagChanges = False
        self.action = self.ui.showUpdates
        self.skipCore = False
        self.limit = None
        self.symlink = 'yes'
        self.types = []

        catching = self.examineSet
        singleCatch = ''
        for arg in sys.argv[1:]:
            if '-x' == arg or '--exclude' == arg:
                catching = self.skipSet
            else:
                # Reset catching to examineSet if we hit a non-list option
                reset = True
                if '--thorough' == arg:
                    self.mode = 'all'
                elif '--no-revisions' == arg:
                    self.noRevisions = True
                elif '--symlink' == arg:
                    singleCatch = 'symlink'
                elif '--with-revisions' == arg:
                    self.noRevisions = False
                elif '--no-cache' == arg or '-C' == arg:
                    self.noCache = True
                elif '--force-cache' == arg or '-c' == arg:
                    self.forceCache = True
                elif '--prompt-install' == arg or '-m' == arg:
                    self.action = self.ui.promptInstall
                    self.mode = 'missing'
                elif '--shell' == arg:
                    self.action = self.ui.shell
                elif '--skip-core' == arg:
                    self.skipCore = True
                elif '--include-core' == arg:
                    self.skipCore = False
                elif '--shallow' == arg or '-s' == arg:
                    self.mode = 'missing'
                elif '--include-flag-changes' == arg:
                    self.includeFlagChanges = True
                    self.mode = 'all'
                    self.types = ['recipe']
                elif '--unordered' == arg:
                    self.mode = 'unordered'
                elif '--install' == arg or '-i' == arg:
                    self.mode = 'missing'
                    self.action = self.ui.installUpdates
                elif '--limit' == arg or '-l' == arg:
                    singleCatch = 'limit'
                elif '-r' == arg or '--recipe' == arg:
                    self.types.append('recipe')
                elif '-p' == arg or '--package' == arg:
                    self.types.append('official_package')
                elif '--contrib' == arg:
                    self.types.append('contrib_package')
                elif '-U' == arg:
                    self.action = self.ui.installUpdates
                elif '--help' == arg:
                    self.action = self.ui.showHelp
                elif '--version' == arg:
                    self.action = self.ui.showVersion
                elif '--no-colour' == arg:
                    for c in Screen.colours:
                        Screen.colours[c] = ''
                elif '--' == arg:
                    # To allow breaking out of multi-argument sections
                    # into the examine list.
                    # e.g. Freshen -x foo bar -- baz quux
                    catching = self.examineSet
                elif singleCatch:
                    self.__dict__[singleCatch] = arg
                    singleCatch = ''
                elif arg[0:2]=='--':
                    Log_Error("Invalid argument " + arg, 'Freshen')
                    exit()
                else:
                    catching.add(arg)
                    reset = False
                if reset:
                    catching = self.examineSet
        if self.limit is not None:
            try:
                self.limit = int(self.limit)
            except ValueError:
                Log_Error("--limit must be passed an integer (not %s)." %
                          (self.limit),
                          'Freshen')
                exit(1)
        if not self.types:
            self.types = ['official_package', 'recipe']
        self.progString = ', '.join(self.examineSet)
        self.examineSet = frozenset(self.examineSet)
        self.skipSet = frozenset(self.skipSet)
