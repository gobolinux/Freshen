# Copyright (C) 2007-2008 Michael Homer <=mwh>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys


class Screen:
    """Access to TTY metadata."""

    with os.popen('stty size') as p:
        height, width = [int(x) for x in p.readline().strip().split(' ')]
    colours = {'red': "\033[1;31m",
               'blue': "\033[1;34m",
               'green': "\033[0;32m",
               'brightgreen': "\033[1;32m",
               'yellow': "\033[1;33m",
               'brown': "\033[33m",
               'cyan': "\033[0;36m",
               'redbg': "\033[0;48m",
               'brownbg': "\033[0;43m",
               'darkgreybg': "\033[0;100m",
               'normal': "\033[0m"}


class ProgressBar:
    """A console progress bar, that may be split into two separate bars."""

    def __init__(self, size, size2=0, alwaysRedraw=False):
        """Initialise the progress bar(s).

        `size` is the maximum value of the first (left, or only) bar.
        `size2`, if given, is the maximum value of the right bar.
        `alwaysRedraw` will draw the bar with every increment.
        """
        self.size = size
        self.size2 = size2
        self.value = 0
        self.value2 = 0
        self.points = -1
        self.points2 = -1
        if size2:
            self.barWidth = Screen.width / 2 - 8
        else:
            self.barWidth = Screen.width - 8
        self.percent = 0
        self.percent2 = 0
        self.alwaysRedraw = alwaysRedraw
        self.enabled = True

    def draw(self):
        """Draw the bar(s) to the screen if enabled."""
        if not self.enabled:
            return
        if self.size2:
            points = int(float(self.value) / self.size * self.barWidth)
            points2 = int(float(self.value2) / self.size2 * self.barWidth)
            pc = int(100 * float(self.value) / self.size)
            pc2 = int(100 * float(self.value2) / self.size2)
            if (self.alwaysRedraw or points != self.points or
                pc != self.percent or points2 != self.points2 or
                pc2 != self.percent2):
                sys.stderr.write(" [%s%s] %3i%%" %
                                 ("#" * points,
                                  " " * (self.barWidth-points), pc))
                sys.stderr.write(" [%s%s] %3i%%\015" %
                                 ("#" * points2,
                                  " " * (self.barWidth-points2), pc2))
                sys.stderr.flush()
                self.points = points
                self.percent = pc
                self.points2 = points2
                self.percent2 = pc2
        else:
            points = int(float(self.value) / self.size * self.barWidth)
            pc = int(100 * float(self.value) / self.size)
            if (self.alwaysRedraw or points != self.points or
                pc != self.percent):
                sys.stderr.write(" [%s%s] %3i%%\015" %
                                 ("#"*points,
                                  " " * (self.barWidth-points), pc))
                sys.stderr.flush()
                self.points = points
                self.percent = pc

    def inc(self, draw=True, n=1):
        """Increment the left bar by `n` (1), redrawing if `draw`."""
        self.value += n
        if draw:
            self.draw()

    def inc2(self, draw=True, n=1):
        """Increment the right bar by `n` (1), redrawing if `draw`."""
        self.value2 += n
        if draw:
            self.draw()

    def clear(self):
        """Clear the bar from the screen, and disable it."""
        sys.stderr.write(' ' * Screen.width + "\015")
        self.enabled = False
